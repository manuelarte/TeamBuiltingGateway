buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'nebula.contacts' version '3.0.1'
    id 'nebula.facet' version '3.3.0'
    id 'nebula.lint' version '6.3.0'
    id 'org.sonarqube' version '2.2.1'
    id 'org.springframework.boot' version '1.5.3.RELEASE'
}

group 'org.manuel.teambuilting'
version '0.1.0-SNAPSHOT'

apply plugin: 'build-announcements'
apply plugin: 'build-dashboard'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'

gradleLint {
    alwaysRun = false
    criticalRules += 'archaic-wrapper'
    criticalRules += 'unused-dependency'
    rules += 'duplicate-dependency-class'
    rules += 'unused-exclude-by-dep'
}

jar {
    baseName = "${microserviceName}"
    version = project.version
}

contacts {
    'manuel.doncel.martos@gmail.com' {
        roles 'developer'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    agent
    all {
        exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jta_1.1_spec'
    }
}

repositories {
    mavenLocal()
    maven { url 'https://repo.spring.io/milestone' }
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Brixton.SR4'
    }
}

dependencies {

    // Gateway libraries
    compile 'org.springframework.cloud:spring-cloud-starter-zuul'

    compile 'javax.inject:javax.inject:1'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly 'org.projectlombok:lombok'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit:4.12'
}

bootRun {
    systemProperties 'user.timezone': 'UTC'

    if (project.hasProperty('jvmArgs')) {
        jvmArgs = (project.jvmArgs.split('\\s+') as java.util.List)
    }
}

task stage {
    dependsOn build
}